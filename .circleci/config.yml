version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@1.3.0
  node: circleci/node@4.7.0
  # sonarcloud: sonarsource/sonarcloud@1.0.3

jobs:
  snyk-security-test:
    docker:
      - image: snyk/snyk:node
    steps:
      - checkout
      - run:
          name: Run Security Test with Snyk Code Security
          command: |
            snyk auth $SNYK_TOKEN
            snyk test --severity-threshold=low --org=erselekmen27 || true

  # sonarqube-quality-test:
    # docker:
      # - image: circleci/sonarqube:latest
    # steps:
      # - checkout
      # - sonarcloud/scan

  npm-build:
    docker:
      - image: cimg/node:20.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run:
          name: Install Dependencies
          command: sudo npm install
      - run:
          name: Install Vue CLI Globally
          command: sudo npm install -g @vue/cli
      - run:
          name: Build the Project
          command: sudo npm run build
      - run:
          name: Update Title in index.html
          command: sudo sed -i 's/<title>.*<\/title>/<title>Training App | S3<\/title>/' dist/index.html
      - save_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: .
          paths:
            - dist

  deploy-build-to-s3:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - aws-cli/setup
      - run:
          name: Deploy Build to AWS S3
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
            echo $BITBUCKET_STEP_OIDC_TOKEN > /tmp/workspace/web-identity-token
            export AWS_REGION=$AWS_REGION
            export AWS_ROLE_ARN=$AWS_ROLE_ARN
            export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/workspace/web-identity-token
            aws s3 sync /tmp/workspace/dist/ $AWS_S3_BUCKET --region $AWS_REGION

  build-image-to-ecr:
    executor: aws-ecr/default
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL  # Replace with your AWS account URL
          repo: training-app-ecr  # Replace with your ECR repository name
          region: AWS_REGION  # Replace with your AWS region
          tag: 'latest'  # Example tag, customize as needed
          dockerfile: Dockerfile  # Specify the path to your Dockerfile if not at the root
          path: .  # Specify the build context path if your Dockerfile isn't in the root directory


  deploy-to-eks:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install kubectl
          command: |
            # Download the latest release of kubectl
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            # Make the kubectl binary executable
            chmod +x ./kubectl
            # Move the binary in to your PATH
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Set up kubeconfig
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy to EKS
          command: |
            # Now that kubectl is installed, we can use it to update the deployment
            kubectl set image 110975517810.dkr.ecr.eu-central-1.amazonaws.com/training-app-ecr container_name=${AWS_ECR_ACCOUNT_URL}/training-app-ecr:${CIRCLE_SHA1} --record
            

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - snyk-security-test
      # - sonarqube-quality-test
      - npm-build:
          filters:
            branches:
              only: [ersel-dev, dev, master]
      - build-image-to-ecr:
          filters:
            branches:
              only: [ersel-dev, dev, master]
      - deploy-build-to-s3:
          requires:
            - npm-build
          filters:
            branches:
              only: [ersel-dev, dev, master]
      - deploy-to-eks:
       #   requires:
      #      - build-image-to-ecr
          filters:
            branches:
              only: [ersel-dev, dev, master]

